---
- hosts: webservers
  become: yes
  become_method: sudo
  collections:
    - ansible.posix
  remote_user: "{{ remote_user }}"
  tasks:
    - name: Ensure group exist
      group:
        name: appmgr
        state: present
    - name: Ensure user exist
      user:
        name: jvmapps
        groups: appmgr
        state: present
    - name: update apt
      block:
        - name: Upgrade all packages to their latest version
          apt:
            update_cache: yes
    - name: install java jdk
      apt:
        name: openjdk-11-jdk
    - name: install java jre
      apt:
        name: openjdk-11-jre
    - name: Create folder
      file:
        path: "{{ base_path }}"
        state: directory
        owner: "{{ remote_user }}"
        group: chris
      register: file_output
      loop:
        - config
    - name: (DEBUG) Allow RSYNC for new super user without SUDO password
      lineinfile:
        path: /etc/sudoers
        state: present
        insertafter: '^%sudo'
        line: "{{ remote_user }} ALL=NOPASSWD: /usr/bin/rsync"
    - name: Copy jar
      synchronize:
        dest: "{{ base_path }}/{{ jar_name }}"
        src: "{{ source_path }}/{{ source_file }}"
        delete: yes
        rsync_path: "rsync"  # Use sudo on the remote system
        recursive: true
    - name: Copy config
      synchronize:
        dest: "{{ base_path }}"
        src: "./config"
        delete: yes
        recursive: true
    - name: (DEBUG) Disallow RSYNC for new super user without SUDO password
      lineinfile:
        path: /etc/sudoers
        state: absent
        line: "{{ remote_user }} ALL=NOPASSWD: /usr/bin/rsync"
    - name: Create log folder
      file:
        path: "{{ base_path }}/config/log"
        state: directory
        owner: "{{ remote_user }}"
        group: chris
        mode: '0777'
    - name: Copy service file
      copy: "src=demoapp.service dest=/etc/systemd/system/{{ app_name }}.service force=yes"
    - name: Restart Service and Reload Daemon
      systemd:
        state: restarted
        daemon_reload: true
        name: "{{ app_name }}"
    - name: Enable Service
      systemd:
        name: "{{ app_name }}"
        enabled: true
        masked: no
